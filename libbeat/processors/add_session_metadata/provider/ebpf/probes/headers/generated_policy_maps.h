// Code generated by github.com/elastic/cloud-defend/cmd/policy - DO NOT EDIT.

#ifndef __POLICYMAPS_H__
#define __POLICYMAPS_H__

#include <bpf/bpf_helpers.h>

// Docker UUIDs are 64 base64 characters (256 bits) (plus a null terminator).
// TODO: Verify other k8s supported container runtimes don't report IDs longer
// than this.
#define CONTAINER_UUID_SIZE 65

// UINT64_MAX is defined in stdint.h, which defines some stuff that conflicts
// with vmlinux.h, so just redefine that here, and give it a more descriptive
// name.
#define FULL_BITSET 0xFFFFFFFFFFFFFFFF

// Until 5.11, the biggest hashmap key we can use is 512 bytes (see
// https://github.com/torvalds/linux/commit/c6bde958a62b8ca5ee8d2c1fe429aec4ad54efad).
// We want to support the 5.10 series, thus we have to abide by the 512 byte
// key size restriction.
//
// We can use at most half of it to build a path due to verifier constraints
// (have to bound by half the size of the buffer)
#define KEY_STRING_SIZE 512
#define POLICY_PATH_MAX 256
#define POLICY_PATH_MAX_INDEX_MASK 255

#define SELECTOR_FIELD_MAP_SIZE 8192
#define UUID_MAP_SIZE 8192

#define UUID_MAP_STRING_ARRAY_INNER_SIZE 32

#define SELECTOR_FIELD_BOOL_WITHOUT_DC(_name)                                                      \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf__##_name SEC(".maps");

#define SELECTOR_FIELD_BOOL(_name)                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf_dc__##_name SEC(".maps");                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf__##_name SEC(".maps");

#define SELECTOR_FIELD_ENUM(_name)                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf_dc__##_name SEC(".maps");                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf__##_name SEC(".maps")

#define SELECTOR_FIELD_STRING(_name)                                                               \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf_dc__##_name SEC(".maps");                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf__##_name SEC(".maps")

#define SELECTOR_FIELD_STRING_WC(_name)                                                            \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf_dc__##_name SEC(".maps");                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf__##_name SEC(".maps");                                                                    \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf_wc__##_name SEC(".maps")

#define SELECTOR_FIELD_PATH(_name)                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, u64);                                                                        \
        __uint(max_entries, 1);                                                                    \
    } sf_dc__##_name SEC(".maps");                                                                 \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf_fxd__##_name SEC(".maps");                                                                \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf_sgl__##_name SEC(".maps");                                                                \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u64);                                                                        \
        __uint(max_entries, SELECTOR_FIELD_MAP_SIZE);                                              \
    } sf_rcr__##_name SEC(".maps")

#define CONTAINER_STATE_STRING(_name)                                                              \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[CONTAINER_UUID_SIZE]);                                                    \
        __type(value, char[512]);                                                                  \
        __uint(max_entries, UUID_MAP_SIZE);                                                        \
    } cs_str__##_name SEC(".maps");

#define CONTAINER_STATE_STRING_SET(_name)                                                          \
    struct cs_inner__##_name {                                                                     \
        __uint(type, BPF_MAP_TYPE_HASH);                                                           \
        __type(key, char[512]);                                                                    \
        __type(value, u8);                                                                         \
        __uint(max_entries, UUID_MAP_STRING_SET_INNER_SIZE);                                       \
    } cs_inner__##_name SEC(".maps");                                                              \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);                                                   \
        __type(key, char[CONTAINER_UUID_SIZE]);                                                    \
        __uint(max_entries, UUID_MAP_SIZE);                                                        \
        __array(values, struct cs_inner__##_name);                                                 \
    } cs_set__##_name SEC(".maps");

/*
 * BPF_F_INNER_MAP is needed to work around a kernel bug introduced in 6.0. The
 * flag is is meant to be used with  _variable sized_ inner maps (which this is
 * not), however it also has the side effect of disabling the buggy codepath in
 * 6.0 and thus working around the bug.
 *
 * https://lore.kernel.org/bpf/20230602190110.47068-1-me@rhysre.net/T/#m4a487ac3c2ea7dca0a7e11b45a9b69eaa6d43309
 */
#define CONTAINER_STATE_STRING_ARRAY(_name)                                                        \
    struct cs_inner__##_name {                                                                     \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __uint(map_flags, BPF_F_INNER_MAP);                                                        \
        __type(key, u32);                                                                          \
        __type(value, char[512]);                                                                  \
        __uint(max_entries, UUID_MAP_STRING_ARRAY_INNER_SIZE);                                     \
    } cs_inner__##_name SEC(".maps");                                                              \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_HASH_OF_MAPS);                                                   \
        __type(key, char[CONTAINER_UUID_SIZE]);                                                    \
        __uint(max_entries, UUID_MAP_SIZE);                                                        \
        __array(values, struct cs_inner__##_name);                                                 \
    } cs_array__##_name SEC(".maps");

#define NODE_STATE_STRING(_name)                                                                   \
    struct {                                                                                       \
        __uint(type, BPF_MAP_TYPE_ARRAY);                                                          \
        __type(key, u32);                                                                          \
        __type(value, char[512]);                                                                  \
        __uint(max_entries, 1);                                                                    \
    } ns_str__##_name SEC(".maps");

// Bool selector fields without a dontcare map
SELECTOR_FIELD_BOOL_WITHOUT_DC(file__ignore_volume_mounts);
SELECTOR_FIELD_BOOL_WITHOUT_DC(file__ignore_volume_files);

// Bool selector fields
SELECTOR_FIELD_BOOL(process__session_leader_interactive);

// Enum selector fields
SELECTOR_FIELD_ENUM(file__operation);
SELECTOR_FIELD_ENUM(process__operation);

// String selector fields
SELECTOR_FIELD_STRING(file__container_image_name);
SELECTOR_FIELD_STRING(file__container_image_full_name);
SELECTOR_FIELD_STRING(file__container_image_tag);
SELECTOR_FIELD_STRING(file__kubernetes_namespace);
SELECTOR_FIELD_STRING(file__kubernetes_cluster_id);
SELECTOR_FIELD_STRING(file__kubernetes_cluster_name);
SELECTOR_FIELD_STRING(process__container_image_name);
SELECTOR_FIELD_STRING(process__container_image_full_name);
SELECTOR_FIELD_STRING(process__container_image_tag);
SELECTOR_FIELD_STRING(process__kubernetes_namespace);
SELECTOR_FIELD_STRING(process__kubernetes_cluster_id);
SELECTOR_FIELD_STRING(process__kubernetes_cluster_name);

// String wildcard selector fields
SELECTOR_FIELD_STRING_WC(file__kubernetes_pod_name);
SELECTOR_FIELD_STRING_WC(file__kubernetes_pod_label);
SELECTOR_FIELD_STRING_WC(process__kubernetes_pod_name);
SELECTOR_FIELD_STRING_WC(process__kubernetes_pod_label);
SELECTOR_FIELD_STRING_WC(process__process_name);

// Path selector fields
SELECTOR_FIELD_PATH(file__target_file_path);
SELECTOR_FIELD_PATH(process__process_executable);

// Enumerated types for use in enum selectors
enum policy_file_operation {
    policy_file_operation__create_file = 0,
    policy_file_operation__modify_file = 1,
    policy_file_operation__delete_file = 2,
    policy_file_operation__create_executable = 3,
    policy_file_operation__modify_executable = 4,
};
enum policy_process_operation {
    policy_process_operation__fork = 0,
    policy_process_operation__exec = 1,
};

// UUID to string mappings
CONTAINER_STATE_STRING(container_image_name);
CONTAINER_STATE_STRING(container_image_full_name);
CONTAINER_STATE_STRING(container_image_tag);
CONTAINER_STATE_STRING(kubernetes_namespace);
CONTAINER_STATE_STRING(kubernetes_pod_name);

// UUID to string set mappings
CONTAINER_STATE_STRING_SET(volume_mounts);

// UUID to string array mappings
CONTAINER_STATE_STRING_ARRAY(kubernetes_pod_label);

// Node info
NODE_STATE_STRING(kubernetes_cluster_name);
NODE_STATE_STRING(kubernetes_cluster_id);

#endif
